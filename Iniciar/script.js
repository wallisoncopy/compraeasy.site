// Quiz data structure
const quizData = {
    phases: [
        {
            name: "Fase 1 - Reten√ß√£o Invis√≠vel",
            pointValue: 1,
            questions: [
                "Voc√™ se sente inchada logo ao acordar, mesmo sem comer nada pesado?",
                "J√° percebeu o rosto ou o corpo mais 'cheios' ao longo do dia, sem explica√ß√£o?",
                "Voc√™ bebe √°gua, mas parece que tudo fica 'preso' no seu corpo?",
                "Sua barriga parece sempre dura ou com sensa√ß√£o de estufamento?"
            ]
        },
        {
            name: "Fase 2 - Inflama√ß√£o Oculta",
            pointValue: 2,
            questions: [
                "Voc√™ sente que seu intestino n√£o funciona como deveria?",
                "J√° sentiu desconforto ou at√© dor abdominal depois de comer?",
                "Mesmo fazendo 'tudo certo', seu corpo n√£o responde mais como antes?",
                "Voc√™ sente que algo est√° travando seu emagrecimento e n√£o sabe o que √©?"
            ]
        },
        {
            name: "Fase 3 - Metabolismo Lento",
            pointValue: 3,
            questions: [
                "Voc√™ se sente cansada ou sem energia grande parte do dia?",
                "J√° tentou emagrecer, teve resultado, mas engordou tudo de novo (ou mais)?",
                "Voc√™ sente que est√° vivendo no piloto autom√°tico, sem √¢nimo?",
                "J√° pensou: 'Meu corpo n√£o √© mais o mesmo de antes'?"
            ]
        },
        {
            name: "Valida√ß√£o Cient√≠fica",
            pointValue: 2,
            questions: [
                "Voc√™ j√° tentou v√°rias dietas mas sempre volta ao peso inicial ou ganha mais?",
                "Sente que seu metabolismo 'travou' e n√£o consegue mais emagrecer como antes?",
                "Voc√™ percebe que acumula gordura principalmente na barriga e quadris?",
                "J√° sentiu que precisa de ajuda profissional para destrancar seu emagrecimento?"
            ]
        }
    ]
};

// Quiz state
let currentQuestionIndex = 0;
let currentPhaseIndex = 0;
let currentPhaseQuestionIndex = 0;
let totalScore = 0;
let totalQuestions = 0;
let userName = "";
let currentWeight = "";
let goalWeight = "";

// Calculate total questions
quizData.phases.forEach(phase => {
    totalQuestions += phase.questions.length;
});

// DOM elements
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const welcomeScreen = document.getElementById('welcomeScreen');
const quizScreen = document.getElementById('quizScreen');
const weightScreen = document.getElementById('weightScreen');
const nameScreen = document.getElementById('nameScreen');
const doctorScreen = document.getElementById('doctorScreen');
const resultsScreen = document.getElementById('resultsScreen');
const phaseText = document.getElementById('phaseText');
const questionText = document.getElementById('questionText');
const questionNumber = document.getElementById('questionNumber');
const totalQuestionsElement = document.getElementById('totalQuestions');

// Initialize quiz
function initializeQuiz() {
    totalQuestionsElement.textContent = totalQuestions;
    updateProgress();
}

// Start quiz
function startQuiz() {
    hideScreen(welcomeScreen);
    showScreen(quizScreen);
    displayCurrentQuestion();
}

// Display current question
function displayCurrentQuestion() {
    const currentPhase = quizData.phases[currentPhaseIndex];
    const question = currentPhase.questions[currentPhaseQuestionIndex];
    
    // Update UI elements
    phaseText.textContent = currentPhase.name;
    questionText.textContent = question;
    questionNumber.textContent = currentQuestionIndex + 1;
    
    // Add entrance animation
    questionText.style.opacity = '0';
    questionText.style.transform = 'translateY(20px)';
    
    setTimeout(() => {
        questionText.style.transition = 'all 0.5s ease-out';
        questionText.style.opacity = '1';
        questionText.style.transform = 'translateY(0)';
    }, 100);
    
    updateProgress();
}

// Handle answer selection
function selectAnswer(isYes) {
    // Add loading state
    quizScreen.classList.add('loading');
    
    // Calculate score if answer is yes
    if (isYes) {
        const currentPhase = quizData.phases[currentPhaseIndex];
        totalScore += currentPhase.pointValue;
    }
    
    // Move to next question
    setTimeout(() => {
        nextQuestion();
        quizScreen.classList.remove('loading');
    }, 800);
}

// Move to next question
function nextQuestion() {
    currentQuestionIndex++;
    currentPhaseQuestionIndex++;
    
    // Check if current phase is complete
    if (currentPhaseQuestionIndex >= quizData.phases[currentPhaseIndex].questions.length) {
        currentPhaseIndex++;
        currentPhaseQuestionIndex = 0;
    }
    
    // Check if quiz is complete
    if (currentPhaseIndex >= quizData.phases.length) {
        completeQuiz();
    } else {
        displayCurrentQuestion();
    }
}

// Complete quiz and show weight screen
function completeQuiz() {
    hideScreen(quizScreen);
    showScreen(weightScreen);
}

// Handle weight selection
function selectWeight(weight) {
    currentWeight = weight;
    
    // Hide current weight question and show goal question
    const currentQ = document.getElementById('currentWeightQuestion');
    const goalQ = document.getElementById('goalWeightQuestion');
    
    currentQ.classList.remove('active');
    goalQ.classList.add('active');
    
    // Add selected effect to button
    const buttons = currentQ.querySelectorAll('.weight-btn');
    buttons.forEach(btn => btn.classList.remove('selected'));
    event.target.classList.add('selected');
}

// Handle goal weight selection
function selectGoal(goal) {
    goalWeight = goal;
    
    // Add selected effect to button
    const buttons = document.getElementById('goalWeightQuestion').querySelectorAll('.weight-btn');
    buttons.forEach(btn => btn.classList.remove('selected'));
    event.target.classList.add('selected');
    
    // Move to name screen after short delay
    setTimeout(() => {
        hideScreen(weightScreen);
        showScreen(nameScreen);
    }, 800);
}

// Submit name and show doctor screen
function submitName() {
    const nameInput = document.getElementById('userName');
    userName = nameInput.value.trim();
    
    if (userName === '') {
        nameInput.style.border = '2px solid #d32f2f';
        nameInput.placeholder = 'Por favor, digite seu nome para continuar...';
        return;
    }
    
    hideScreen(nameScreen);
    showScreen(doctorScreen);
}

// Show results based on score
function showResults() {
    hideScreen(doctorScreen);
    showScreen(resultsScreen);
    
    const diagnosisTitle = document.getElementById('diagnosisTitle');
    const diagnosisIcon = document.getElementById('diagnosisIcon');
    const diagnosisDescription = document.getElementById('diagnosisDescription');
    
    let diagnosis;
    
    if (totalScore <= 12) {
        diagnosis = {
            title: "Fase 1 ‚Äì Reten√ß√£o Leve",
            icon: "üíß",
            description: `
                <h4>${userName ? userName + ', s' : 'S'}eu Diagn√≥stico Personalizado:</h4>
                <p>${userName ? userName + ', voc√™' : 'Voc√™'} est√° enfrentando <strong>reten√ß√£o leve</strong>, que pode estar fazendo voc√™ se sentir inchada e com a sensa√ß√£o de que seu corpo est√° "segurando" l√≠quidos.</p>
                ${currentWeight && goalWeight ? `<p><strong>Considerando seu perfil:</strong> Peso atual ${currentWeight}kg e meta de eliminar ${goalWeight}kg, voc√™ est√° na fase ideal para come√ßar sua transforma√ß√£o!</p>` : ''}
                <p>A boa not√≠cia ${userName ? userName : ''} √© que essa √© a fase mais f√°cil de reverter! Com as estrat√©gias certas, voc√™ pode come√ßar a sentir a diferen√ßa em poucos dias.</p>
                <p><strong>O que isso significa para ${userName ? 'voc√™, ' + userName : 'voc√™'}:</strong> Seu corpo precisa de um "reset" para eliminar o excesso de l√≠quidos e toxinas que est√£o causando o incha√ßo.</p>
            `
        };
    } else if (totalScore <= 24) {
        diagnosis = {
            title: "Fase 2 ‚Äì Inflama√ß√£o Oculta",
            icon: "üî•",
            description: `
                <h4>${userName ? userName + ', s' : 'S'}eu Diagn√≥stico Personalizado:</h4>
                <p>${userName ? userName + ', voc√™' : 'Voc√™'} est√° lidando com <strong>inflama√ß√£o oculta</strong>, um processo silencioso que est√° sabotando seus resultados e causando desconfortos que voc√™ nem imaginava que estavam conectados.</p>
                ${currentWeight && goalWeight ? `<p><strong>Com base no seu perfil:</strong> Peso atual ${currentWeight}kg e objetivo de eliminar ${goalWeight}kg, o Detox 3D √© fundamental para destravar sua queima de gordura!</p>` : ''}
                <p>Essa inflama√ß√£o est√° "travando" seu corpo e impedindo que ${userName ? 'voc√™, ' + userName + ',' : 'voc√™'} tenha os resultados que merece, mesmo fazendo tudo certo.</p>
                <p><strong>O que isso significa para ${userName ? 'voc√™, ' + userName : 'voc√™'}:</strong> Seu organismo est√° em estado de alerta constante, dificultando a queima de gordura e causando reten√ß√£o. Mas isso tem solu√ß√£o!</p>
            `
        };
    } else {
        diagnosis = {
            title: "Fase 3 ‚Äì Travamento Metab√≥lico",
            icon: "‚ö°",
            description: `
                <h4>${userName ? userName + ', s' : 'S'}eu Diagn√≥stico Personalizado:</h4>
                <p>${userName ? userName + ', voc√™' : 'Voc√™'} est√° enfrentando um <strong>travamento metab√≥lico</strong>, onde seu corpo entrou em "modo economia" e n√£o responde mais aos seus esfor√ßos como deveria.</p>
                ${currentWeight && goalWeight ? `<p><strong>Seu caso espec√≠fico:</strong> Com peso atual de ${currentWeight}kg e meta de eliminar ${goalWeight}kg, voc√™ precisa URGENTEMENTE reativar seu metabolismo com o Detox 3D!</p>` : ''}
                <p>Isso explica por que ${userName ? 'voc√™, ' + userName + ',' : 'voc√™'} se sente cansada, sem energia, e por que √© t√£o dif√≠cil emagrecer (ou manter o peso perdido).</p>
                <p><strong>O que isso significa para ${userName ? 'voc√™, ' + userName : 'voc√™'}:</strong> Seu metabolismo precisa ser "destravado" e reativado. Seu corpo esqueceu como queimar gordura eficientemente, mas voc√™ pode ensinar ele novamente!</p>
            `
        };
    }
    
    diagnosisTitle.textContent = diagnosis.title;
    diagnosisIcon.textContent = diagnosis.icon;
    diagnosisDescription.innerHTML = diagnosis.description;
    
    // Add entrance animations
    setTimeout(() => {
        diagnosisTitle.style.animation = 'fadeIn 0.8s ease-out';
        diagnosisIcon.style.animation = 'fadeIn 0.8s ease-out 0.2s both';
        diagnosisDescription.style.animation = 'fadeIn 0.8s ease-out 0.4s both';
    }, 100);
}

// Update progress bar
function updateProgress() {
    const progress = (currentQuestionIndex / totalQuestions) * 100;
    progressFill.style.width = `${progress}%`;
    progressText.textContent = `${currentQuestionIndex} de ${totalQuestions}`;
}

// Screen management functions
function hideScreen(screen) {
    screen.style.animation = 'fadeOut 0.4s ease-out';
    setTimeout(() => {
        screen.classList.remove('active');
        screen.style.animation = '';
    }, 400);
}

function showScreen(screen) {
    screen.classList.add('active');
    screen.style.animation = 'fadeIn 0.6s ease-out';
}

// Redirect to checkout
function redirectToCheckout(event) {
    // Add click animation
    if (event && event.target) {
        event.target.style.transform = 'scale(0.95)';
        
        setTimeout(() => {
            event.target.style.transform = 'scale(1)';
        }, 300);
    }
    
    setTimeout(() => {
        window.open('https://paypagamentostx3.shop/checkout-white-7054/?add-to-cart=7054', '_blank');
    }, 200);
}

// Add fadeOut animation
const fadeOutKeyframes = `
    @keyframes fadeOut {
        from {
            opacity: 1;
            transform: translateY(0);
        }
        to {
            opacity: 0;
            transform: translateY(-20px);
        }
    }
`;

// Add the fadeOut animation to the stylesheet
const style = document.createElement('style');
style.textContent = fadeOutKeyframes;
document.head.appendChild(style);

// Initialize quiz when page loads
document.addEventListener('DOMContentLoaded', initializeQuiz);

// Add smooth scrolling behavior
document.documentElement.style.scrollBehavior = 'smooth';

// Add touch feedback for mobile devices
document.addEventListener('touchstart', function() {}, { passive: true });

// Prevent zoom on input focus for iOS
document.addEventListener('touchstart', function(e) {
    if (e.touches.length > 1) {
        e.preventDefault();
    }
}, { passive: false });

// Add keyboard navigation support
document.addEventListener('keydown', function(e) {
    if (quizScreen.classList.contains('active')) {
        if (e.key === '1' || e.key === 'y' || e.key === 'Y') {
            selectAnswer(true);
        } else if (e.key === '2' || e.key === 'n' || e.key === 'N') {
            selectAnswer(false);
        }
    } else if (nameScreen.classList.contains('active')) {
        if (e.key === 'Enter') {
            submitName();
        }
    }
});

// Performance optimization: Preload next question
function preloadNextQuestion() {
    // This could be expanded to preload images or other assets
    // For now, it's just a placeholder for future enhancements
}

// FAQ toggle functionality
function toggleFaq(faqNumber) {
    const answer = document.getElementById(`faq${faqNumber}`);
    const allAnswers = document.querySelectorAll('.faq-answer');
    const allArrows = document.querySelectorAll('.faq-arrow');
    
    // Close all other FAQs
    allAnswers.forEach((item, index) => {
        if (index + 1 !== faqNumber) {
            item.classList.remove('active');
            allArrows[index].style.transform = 'rotate(0deg)';
        }
    });
    
    // Toggle current FAQ
    answer.classList.toggle('active');
    const arrow = allArrows[faqNumber - 1];
    if (answer.classList.contains('active')) {
        arrow.style.transform = 'rotate(180deg)';
    } else {
        arrow.style.transform = 'rotate(0deg)';
    }
}

// Analytics tracking (placeholder for future implementation)
function trackQuizProgress(questionIndex, answer) {
    // This could be connected to analytics services
    console.log(`Question ${questionIndex + 1}: ${answer ? 'Yes' : 'No'}`);
}

// Add error handling
window.addEventListener('error', function(e) {
    console.error('Quiz Error:', e.error);
    // Could implement user-friendly error messaging here
});
