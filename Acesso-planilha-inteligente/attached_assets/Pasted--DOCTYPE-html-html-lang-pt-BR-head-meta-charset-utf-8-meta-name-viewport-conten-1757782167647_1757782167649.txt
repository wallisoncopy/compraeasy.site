<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Planilha Inteligente de Produtos - Supermercado</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root{--bg:#f6f7fb;--card:#ffffff;--accent:#2c3e50;--btn:#27ae60}
    body{font-family:Inter,Arial,Helvetica,sans-serif;background:var(--bg);margin:20px;color:var(--accent)}
    h1{text-align:center;margin-bottom:6px}
    .wrap{max-width:1100px;margin:0 auto}
    .topbar{display:flex;gap:10px;align-items:center;justify-content:space-between}
    table{width:100%;border-collapse:collapse;margin-top:14px;background:var(--card);box-shadow:0 6px 18px rgba(0,0,0,0.06);border-radius:8px;overflow:hidden}
    th,td{padding:10px;border-bottom:1px solid #eee;text-align:center;font-size:14px}
    th{background:var(--accent);color:#fff;font-weight:600}
    input[type="text"],input[type="number"]{width:100%;padding:6px;border:1px solid #ddd;border-radius:4px}
    .controls{margin-top:12px;display:flex;gap:10px;flex-wrap:wrap}
    .btn{background:var(--btn);color:#fff;padding:10px 14px;border:none;border-radius:6px;cursor:pointer}
    .btn.secondary{background:#3498db}
    .small{font-size:12px;padding:6px 10px}
    .summary{display:flex;gap:12px;margin-top:14px;flex-wrap:wrap}
    .card{background:var(--card);padding:12px;border-radius:8px;box-shadow:0 4px 10px rgba(0,0,0,0.04);flex:1;min-width:220px}
    .danger{color:#c0392b;font-weight:700}
    .green{color:#16a085;font-weight:700}
    canvas{background:var(--card);border-radius:8px;padding:10px}
    footer{margin-top:18px;text-align:center;color:#666;font-size:13px}
    @media(max-width:720px){th,td{font-size:12px;padding:8px}}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>📈 Planilha Inteligente de <strong>Produtos</strong> - Supermercado</h1>

    <div class="topbar">
      <div style="max-width:640px">
        <div style="font-size:13px;color:#555">Período padrão: <strong id="periodLabel">Mensal (30 dias)</strong></div>
        <div style="font-size:12px;color:#888">Ajuste consumo médio e lead time para cálculo do ponto de reposição.</div>
      </div>
      <div>
        <button class="btn small" onclick="adicionarLinha()">➕ Produto</button>
        <button class="btn secondary small" onclick="calcular()">📊 Calcular</button>
        <button class="btn small" onclick="salvarDados()">💾 Salvar Lista</button>
        <button class="btn small" onclick="carregarDados()">📂 Carregar Lista</button>
        <button class="btn small" onclick="exportarCSV()">⬇ Exportar CSV</button>
      </div>
    </div>

    <table id="tabela">
      <thead>
        <tr>
          <th>Produto</th>
          <th>Categoria</th>
          <th>Consumo Médio / Mês</th>
          <th>Estoque Atual</th>
          <th>Preço Compra (R$)</th>
          <th>Preço Venda (R$)</th>
          <th>Lead Time (dias)</th>
          <th>Qtd. Sugerida</th>
          <th>Ponto Reposição</th>
          <th>Lucro Pot. / Mês (R$)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><input type="text" placeholder="Ex: Arroz 5kg"></td>
          <td><input type="text" placeholder="Mercearia"></td>
          <td><input type="number" value="0" min="0"></td>
          <td><input type="number" value="0" min="0"></td>
          <td><input type="number" value="0" step="0.01" min="0"></td>
          <td><input type="number" value="0" step="0.01" min="0"></td>
          <td><input type="number" value="7" min="0"></td>
          <td class="qtdSugerida">0</td>
          <td class="pontoReposicao">0</td>
          <td class="lucroPot">0</td>
        </tr>
      </tbody>
    </table>

    <div class="summary">
      <div class="card">
        <div style="font-size:13px;color:#666">Produtos em risco de falta</div>
        <div id="riscoList" style="margin-top:8px;color:#c0392b;font-weight:700">Nenhum</div>
      </div>
      <div class="card">
        <div style="font-size:13px;color:#666">Total Estimado de Compra (R$)</div>
        <div id="totalCompra" style="margin-top:8px;font-size:18px;font-weight:700">R$ 0,00</div>
      </div>
      <div class="card">
        <div style="font-size:13px;color:#666">Lucro Potencial Mensal (R$)</div>
        <div id="totalLucro" style="margin-top:8px;font-size:18px;font-weight:700;color:#16a085">R$ 0,00</div>
      </div>
    </div>

    <div style="margin-top:18px" class="card">
      <canvas id="chartConsumo" height="120"></canvas>
    </div>

    <footer>
      Dica: preencha o <strong>Consumo Médio / Mês</strong> com média de vendas reais. <br>
      Lead Time = dias que o fornecedor demora para entregar (use 7 se não souber).
    </footer>
  </div>

  <script>
    // CLONAR LINHA
    function adicionarLinha(){
      const tabela=document.querySelector("#tabela tbody");
      const nova=tabela.rows[0].cloneNode(true);
      nova.querySelectorAll("input").forEach(i=>i.value=(i.type==="number"?0:""));
      nova.querySelector(".qtdSugerida").textContent="0";
      nova.querySelector(".pontoReposicao").textContent="0";
      nova.querySelector(".lucroPot").textContent="0";
      tabela.appendChild(nova);
    }

    // CALCULAR
    function calcular(){
      const linhas=document.querySelectorAll("#tabela tbody tr");
      const periodDays=30;
      let totalCompra=0,totalLucroPot=0,consumoArray=[],riscoItems=[];
      linhas.forEach(linha=>{
        const nome=linha.cells[0].querySelector("input").value.trim()||"—";
        const consumoMes=parseFloat(linha.cells[2].querySelector("input").value)||0;
        const estoque=parseFloat(linha.cells[3].querySelector("input").value)||0;
        const precoCompra=parseFloat(linha.cells[4].querySelector("input").value)||0;
        const precoVenda=parseFloat(linha.cells[5].querySelector("input").value)||0;
        const leadTime=parseFloat(linha.cells[6].querySelector("input").value)||7;

        const consumoDiario=consumoMes/periodDays;
        const pontoReposicao=Math.ceil(consumoDiario*leadTime);
        const qtdSugerida=Math.max(Math.ceil(consumoMes-estoque),0);
        const lucroPotMensal=Math.max(consumoMes*(precoVenda-precoCompra),0);
        const custoCompra=qtdSugerida*precoCompra;

        linha.querySelector(".qtdSugerida").textContent=qtdSugerida;
        linha.querySelector(".pontoReposicao").textContent=pontoReposicao;
        linha.querySelector(".lucroPot").textContent=lucroPotMensal.toFixed(2);

        totalCompra+=custoCompra;
        totalLucroPot+=lucroPotMensal;
        consumoArray.push({nome,consumoMes,lucroPotMensal,estoque});

        if(estoque<=pontoReposicao) riscoItems.push(`${nome} (estoque ${estoque} ≤ ponto ${pontoReposicao})`);
      });

      document.getElementById("totalCompra").textContent="R$ "+totalCompra.toFixed(2);
      document.getElementById("totalLucro").textContent="R$ "+totalLucroPot.toFixed(2);
      document.getElementById("riscoList").textContent=riscoItems.length?riscoItems.join(" · "):"Nenhum";

      desenharGrafico(consumoArray);
    }

    // EXPORTAR CSV
    function exportarCSV(){
      let csv="Produto,Categoria,Consumo Médio/Mês,Estoque Atual,Preço Compra,Preço Venda,Lead Time (dias),Qtd Sugerida,Ponto Reposição,Lucro Potencial Mensal\n";
      const linhas=document.querySelectorAll("#tabela tbody tr");
      linhas.forEach(linha=>{
        const cells=linha.querySelectorAll("input");
        const row=[
          cells[0].value,cells[1].value,cells[2].value,cells[3].value,
          cells[4].value,cells[5].value,cells[6].value,
          linha.querySelector(".qtdSugerida").textContent,
          linha.querySelector(".pontoReposicao").textContent,
          linha.querySelector(".lucroPot").textContent
        ].map(v=>`"${String(v).replace(/"/g,'""')}"`).join(",");
        csv+=row+"\n";
      });
      const blob=new Blob([csv],{type:"text/csv;charset=utf-8;"});
      const url=URL.createObjectURL(blob);
      const a=document.createElement("a");
      a.href=url;
      a.download="lista_compras_produtos.csv";
      a.click();
      URL.revokeObjectURL(url);
    }

    // SALVAR LOCAL STORAGE
    function salvarDados(){
      const linhas=document.querySelectorAll("#tabela tbody tr");
      const dados=[];
      linhas.forEach(linha=>{
        const item={
          nome:linha.cells[0].querySelector("input").value,
          categoria:linha.cells[1].querySelector("input").value,
          consumo:parseFloat(linha.cells[2].querySelector("input").value)||0,
          estoque:parseFloat(linha.cells[3].querySelector("input").value)||0,
          precoCompra:parseFloat(linha.cells[4].querySelector("input").value)||0,
          precoVenda:parseFloat(linha.cells[5].querySelector("input").value)||0,
          leadTime:parseFloat(linha.cells[6].querySelector("input").value)||7
        };
        dados.push(item);
      });
      localStorage.setItem("lista_produtos_supermercado",JSON.stringify(dados));
      alert("✅ Lista salva no navegador!");
    }

    // CARREGAR LOCAL STORAGE
    function carregarDados(){
      const dados=JSON.parse(localStorage.getItem("lista_produtos_supermercado")||"[]");
      if(!dados.length) { alert("⚠ Nenhuma lista salva encontrada."); return; }
      const tabela=document.querySelector("#tabela tbody");
      tabela.innerHTML="";
      dados.forEach(item=>{
        const linha=document.createElement("tr");
        linha.innerHTML=`
          <td><input type="text" value="${item.nome}"></td>
          <td><input type="text" value="${item.categoria}"></td>
          <td><input type="number" value="${item.consumo}"></td>
          <td><input type="number" value="${item.estoque}"></td>
          <td><input type="number" value="${item.precoCompra}"></td>
          <td><input type="number" value="${item.precoVenda}"></td>
          <td><input type="number" value="${item.leadTime}"></td>
          <td class="qtdSugerida">0</td>
          <td class="pontoReposicao">0</td>
          <td class="lucroPot">0</td>
        `;
        tabela.appendChild(linha);
      });
      calcular();
      alert("✅ Lista carregada com sucesso!");
    }

    // GRÁFICO
    let chartInstance=null;
    function desenharGrafico(dataArr){
      const sorted=dataArr.slice().sort((a,b)=>b.consumoMes-a.consumoMes).slice(0,8);
      const labels=sorted.map(s=>s.nome);
      const valores=sorted.map(s=>s.consumoMes);
      const ctx=document.getElementById('chartConsumo').getContext('2d');
      if(chartInstance) chartInstance.destroy();
      chartInstance=new Chart(ctx,{
        type:'bar',
        data:{labels,datasets:[{label:'Consumo Médio / Mês',data:valores,borderRadius:6,barPercentage:0.6}]},
        options:{responsive:true,plugins:{legend:{display:false},tooltip:{callbacks:{label: ctx=>" "+ctx.formattedValue+" unidades/mês"}}},scales:{x:{ticks:{autoSkip:false}},y:{beginAtZero:true}}}
      });
    }

    // inicial
    calcular();
  </script>
</body>
</html>
